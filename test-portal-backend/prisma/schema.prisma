generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid()) // Changed
  name          String
  email         String         @unique
  phone         String
  note          String
  role          UserRole       @default(PARTICIPANT)
  status        UserStatus     @default(PENDING)
  createdAt     DateTime       @default(now())
  lastActivity  DateTime?

  // Relations
  assignments   TestAssignment[]
  attempts      TestAttempt[]
  batchMembers  BatchParticipant[]
}

enum UserRole {
  ADMIN
  PARTICIPANT
}

enum UserStatus {
  PENDING
  ACTIVE
  INACTIVE
}
enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model Test {
  id                       String    @id @default(cuid())
  title                    String
  description              String?
  instructions             String?
  passingScore             Int?
  timeLimit                Int?       // in minutes
  scheduledDateTime        DateTime
  notifyBeforeStartMinutes Int?       // e.g., 15 minutes before test start
  difficulty               Difficulty @default(MEDIUM)
  createdAt                DateTime   @default(now())
  updatedAt                DateTime   @updatedAt
  groupId                  String

  group         QuestionGroup @relation(fields: [groupId], references: [id])
  assignments   TestAssignment[]
  attempts      TestAttempt[]
  batchTests    BatchTest[]
  
}

model TestAssignment {
  id          String   @id @default(cuid()) // Changed
  userId      String // Changed
  testId      String // Changed
  assignedAt  DateTime @default(now())

  // Relations
  user        User     @relation(fields: [userId], references: [id])
  test        Test     @relation(fields: [testId], references: [id])

  @@unique([userId, testId])
}

model TestAttempt {
  id           String    @id @default(cuid()) // Changed
  userId       String // Changed
  testId       String // Changed
  startedAt    DateTime  @default(now())
  completedAt  DateTime?
  score        Float?

  // Relations
  user         User      @relation(fields: [userId], references: [id])
  test         Test      @relation(fields: [testId], references: [id])

  @@unique([userId, testId])
}

model Batch {
  id        String    @id @default(cuid()) // Changed
  name      String
  createdAt DateTime  @default(now())

  // Relations
  participants BatchParticipant[]
  tests        BatchTest[]
}

model BatchParticipant {
  id        String   @id @default(cuid()) // Changed
  batchId   String // Changed
  userId    String // Changed
  joinedAt  DateTime @default(now())

  batch     Batch @relation(fields: [batchId], references: [id])
  user      User  @relation(fields: [userId], references: [id])

  @@unique([batchId, userId])
}

model BatchTest {
  id      String @id @default(cuid()) // Changed
  batchId String // Changed
  testId  String // Changed

  batch   Batch @relation(fields: [batchId], references: [id])
  test    Test  @relation(fields: [testId], references: [id])

  @@unique([batchId, testId])
}


model QuestionGroup {
  id          String      @id @default(cuid())
  name        String
  questions   Question[]
  createdAt   DateTime    @default(now())
 

  Test Test[]
}

model Question {
  id            String  @id @default(cuid())
  question      String
  type          String
  difficulty    String
  options       String[]    // store array of options
  correctAnswer String
  explanation   String?
  points        Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  groupId       String
  group         QuestionGroup @relation(fields: [groupId], references: [id])
}

